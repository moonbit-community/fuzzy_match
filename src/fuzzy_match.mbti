package "illusory0x0/fuzzy_match"

import(
  "moonbitlang/core/string"
)

// Values
fn is_match[Pattern : StringLike, Text : StringLike](char_equal~ : (Char, Char) -> Bool = .., pattern~ : Pattern, text~ : Text) -> Bool

fn matching_indices[Item : StringLike](Query, item~ : Item) -> Array[Int]?

fn score[Item : StringLike](Query, item~ : Item) -> Int

fn score_upper_bound(query_length~ : Int) -> Int

fn search[Item : StringLike + Compare](Query, items~ : Array[Item]) -> Array[@string.StringView]

fn split_by_matching_sections[Item : StringLike](Query, item~ : Item) -> Array[(Bool, @string.StringView)]?

// Types and methods
type Query
impl Query {
  matching_indices[Item : StringLike](Self, item~ : Item) -> Array[Int]?
  new(String) -> Self
  score[Item : StringLike](Self, item~ : Item) -> Int
  search[Item : StringLike + Compare](Self, items~ : Array[Item]) -> Array[@string.StringView]
  split_by_matching_sections[Item : StringLike](Self, item~ : Item) -> Array[(Bool, @string.StringView)]?
}

// Type aliases

// Traits
pub(open) trait StringLike {
  length(Self) -> Int
  op_get(Self, Int) -> Char
  is_empty(Self) -> Bool = _
  to_string(Self) -> String
  view(Self, Int, Int) -> @string.StringView
}
impl StringLike for String
impl StringLike for @string.StringView

